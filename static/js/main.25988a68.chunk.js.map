{"version":3,"sources":["components/Form/StyledFormComponents.jsx","components/Form/Form.jsx","components/Contacts/StyledContactsComponents.jsx","components/Contacts/Contacts.jsx","components/Filter/StyledFilterComponents.jsx","components/Filter/Filter.jsx","components/HardCodeCheckbox/StyledHardCodedCheckComponents.jsx","components/HardCodeCheckbox/HardCodeCheckbox.jsx","components/AppComponents/AppComponents.jsx","data/hardCodedContacts.js","App.js","reportWebVitals.js","index.js"],"names":["StyledForm","styled","form","StyledTitle","h1","StyledLable","label","StyledInput","input","StyledButton","button","Form","props","isValidInput","event","target","value","match","pattern","length","colorizeInputOnValidation","style","onInputChange","inputName","name","inputValue","setState","clearInputs","number","submitNewContact","preventDefault","state","onNewContactAdd","onSubmit","this","type","title","placeholder","required","onChange","React","Component","StyledSubTitle","h2","StyledDiv","div","StyledList","ul","StyledItem","li","StyledName","p","StyledNumber","Contacts","contacts","deleteContact","deleteAll","contactsItems","map","id","onClick","backgroundColor","StyledLabel","Filter","onFilterChange","filter","disabled","StyledCheckbox","HardCodeContactsCheckbox","onHardCodedCheckboxChange","isHardCodedContactsUsed","checked","StyledApp","section","StyledBanner","hardCodedContacts","App","isNameInContacts","searchName","find","isContactAdded","bool","addContact","toast","warn","existContactMessage","uuidv4","success","addedContactMessage","contact","getHardCodedContacts","contactEl","includes","filterContacts","searchStr","toLowerCase","contactsFromLocalStorage","JSON","parse","localStorage","getItem","some","setItem","stringify","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.25988a68.chunk.js","sourcesContent":["import styled from \"styled-components\";\n\nexport const StyledForm = styled.form`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n\n  width: 100%;\n\n  margin-bottom: 1.5rem;\n`;\n\nexport const StyledTitle = styled.h1`\n  text-align: center;\n  text-transform: uppercase;\n  color: #2db57f;\n  font-size: 2rem;\n  margin-bottom: 1rem;\n\n  text-shadow: 1px 1px 1px -2px rgba(0, 0, 0, 0.56);\n`;\n\nexport const StyledLable = styled.label`\n  text-transform: uppercase;\n  font-size: 1.25rem;\n  font-weight: 600;\n\n  color: #2db57f;\n\n  display: flex;\n  align-self: flex-end;\n  align-items: center;\n  justify-content: space-between;\n\n  &:not(:last-of-type) {\n    margin-bottom: 1rem;\n  }\n\n  &:last-of-type {\n    margin-bottom: 2rem;\n  }\n`;\n\nexport const StyledInput = styled.input`\n  margin-left: 0.75rem;\n  display: block;\n\n  min-width: 330px;\n  height: 2rem;\n  font-size: 1.25rem;\n  font-weight: 400;\n  padding: 0.5rem 0.5rem 0.25rem;\n\n  border: 0;\n  border-bottom: 1px solid #c15ae0;\n  color: #1f2120;\n\n  &:-webkit-autofill,\n  &:-webkit-autofill:hover,\n  &:-webkit-autofill:focus,\n  &:-webkit-autofill:active {\n    -webkit-box-shadow: 0 0 0 30px #ffffff inset !important;\n  }\n\n  &:focus {\n    outline-color: #c15ae0;\n  }\n`;\n\nexport const StyledButton = styled.button`\n  width: 250px;\n  align-self: center;\n  padding: 0.5rem 1rem;\n  border: 1px solid #c15ae0;\n  border-radius: 0.5rem;\n\n  font-size: 1.5rem;\n\n  text-transform: uppercase;\n\n  color: #c15ae0;\n  background: transparent;\n  cursor: pointer;\n  transition: transform 250ms ease-in-out, box-shadow 250ms ease-in-out;\n\n  &:hover,\n  &:focus {\n    transform: translateY(-0.15rem);\n    box-shadow: 2px 2px 5px -2px rgba(0, 0, 0, 0.56);\n  }\n`;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport {\n  StyledForm,\n  StyledTitle,\n  StyledLable,\n  StyledInput,\n  StyledButton as StyledPrimaryButton,\n} from './StyledFormComponents';\n\nclass Form extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      name: '',\n      number: '',\n    };\n  }\n\n  //#region class methods\n\n  isValidInput = (event) => {\n    if (event.target.value.match(event.target.pattern) === null && event.target.value.length !== 0) {\n      return false;\n    }\n    return true;\n  };\n\n  colorizeInputOnValidation = (event) => {\n    if (!this.isValidInput(event)) {\n      event.target.style = 'background-color: #f7d7d7;';\n    } else {\n      event.target.style = 'background-color: transparent;';\n    }\n  };\n\n  onInputChange = (event) => {\n    this.colorizeInputOnValidation(event);\n\n    const inputName = event.target.name;\n    const inputValue = event.target.value;\n\n    this.setState({ [inputName]: inputValue });\n  };\n\n  clearInputs = () => {\n    this.setState({\n      name: '',\n      number: '',\n    });\n  };\n\n  submitNewContact = (event) => {\n    event.preventDefault();\n\n    const name = this.state.name;\n    const number = this.state.number;\n    const isContactAdded = this.props.onNewContactAdd(name, number);\n\n    if (isContactAdded) {\n      this.clearInputs();\n    }\n  };\n\n  //#endregion\n\n  render() {\n    return (\n      <>\n        <StyledTitle>Phonebook</StyledTitle>\n        <StyledForm onSubmit={this.submitNewContact}>\n          <StyledLable>\n            Name\n            <StyledInput\n              type=\"text\"\n              name=\"name\"\n              pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n              title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n              placeholder=\"Please, type contact name\"\n              required\n              value={this.state.name}\n              onChange={this.onInputChange}\n            />\n          </StyledLable>\n          <StyledLable>\n            Number\n            <StyledInput\n              type=\"tel\"\n              name=\"number\"\n              pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n              title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n              placeholder=\"Please, type contact number\"\n              required\n              value={this.state.number}\n              onChange={this.onInputChange}\n            />\n          </StyledLable>\n          <StyledPrimaryButton type=\"submit\">Add contact</StyledPrimaryButton>\n        </StyledForm>\n      </>\n    );\n  }\n}\n\nForm.propTypes = {\n  onNewContactAdd: PropTypes.func,\n};\n\nexport default Form;\n","import styled from 'styled-components';\n\nexport const StyledSubTitle = styled.h2`\n  color: #2db57f;\n  text-transform: uppercase;\n  margin-bottom: 1rem;\n`;\n\nexport const StyledDiv = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n\n  width: 100%;\n\n  padding: 1rem 1.5rem;\n  background-color: #d6d6d6;\n`;\n\nexport const StyledButton = styled.button`\n  align-self: center;\n  padding: 0.25rem 0.75rem;\n  border: 1px solid #c15ae0;\n  border-radius: 0.5rem;\n\n  font-size: 0.75rem;\n\n  text-transform: uppercase;\n\n  color: #c15ae0;\n  background: #ffffff;\n  cursor: pointer;\n  transition: transform 250ms ease-in-out, box-shadow 250ms ease-in-out;\n\n  &:hover,\n  &:focus {\n    transform: translateY(-0.1rem);\n    box-shadow: 2px 2px 5px -2px rgba(0, 0, 0, 0.56);\n  }\n`;\n\nexport const StyledList = styled.ul`\n  display: flex;\n  width: 100%;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n\n  list-style: none;\n\n  margin-bottom: 1rem;\n`;\n\nexport const StyledItem = styled.li`\n  width: 100%;\n  display: flex;\n  align-items: stretch;\n  justify-content: space-between;\n\n  background-color: #ffffff;\n\n  padding: 0.5rem 1rem;\n\n  &:not(:last-of-type) {\n    margin-bottom: 1rem;\n  }\n`;\n\nexport const StyledName = styled.p`\n  font-size: 1rem;\n  font-weight: 600;\n\n  display: block;\n  min-width: 40%;\n`;\n\nexport const StyledNumber = styled.p`\n  font-size: 1rem;\n  font-weight: 600;\n  display: block;\n  min-width: 35%;\n  color: #2db57f;\n`;\n","import PropTypes from 'prop-types';\n\nimport {\n  StyledItem,\n  StyledName,\n  StyledNumber,\n  StyledDiv,\n  StyledList,\n  StyledSubTitle,\n  StyledButton,\n} from './StyledContactsComponents';\n\nimport { StyledButton as StyledPrimaryButton } from '../Form/StyledFormComponents';\n\nconst Contacts = ({ contacts, deleteContact, deleteAll }) => {\n  const contactsItems = contacts.map(({ name, number, id }) => {\n    return (\n      <StyledItem key={id}>\n        <StyledName>{name}</StyledName>\n        <StyledNumber>{number}</StyledNumber>\n\n        <StyledButton onClick={deleteContact} value={id}>\n          Remove\n        </StyledButton>\n      </StyledItem>\n    );\n  });\n\n  return (\n    <StyledDiv>\n      <StyledSubTitle>Contacts</StyledSubTitle>\n      <StyledList>{contactsItems}</StyledList>\n      <StyledPrimaryButton onClick={deleteAll} style={{ backgroundColor: '#FAFAFA' }}>\n        Remove all\n      </StyledPrimaryButton>\n    </StyledDiv>\n  );\n};\n\nContacts.propTypes = {\n  deleteContact: PropTypes.func,\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string,\n      name: PropTypes.string,\n      number: PropTypes.string,\n    })\n  ),\n};\n\nexport default Contacts;\n","import styled from \"styled-components\";\n\nexport const StyledLabel = styled.label`\n  text-transform: uppercase;\n  font-size: 1.25rem;\n  font-weight: 600;\n\n  color: #2db57f;\n\n  display: flex;\n  align-self: flex-end;\n  align-items: center;\n  justify-content: space-between;\n\n  &:not(:last-of-type) {\n    margin-bottom: 1rem;\n  }\n\n  &:last-of-type {\n    margin-bottom: 2rem;\n  }\n`;\n\nexport const StyledInput = styled.input`\n  margin-left: 0.75rem;\n  display: block;\n  min-width: 350px;\n  height: 2rem;\n  font-size: 1.25rem;\n  font-weight: 400;\n  padding: 0.5rem 0.5rem 0.25rem;\n\n  border: 0;\n  border-bottom: 1px solid #c15ae0;\n  color: #1f2120;\n\n  &:-webkit-autofill,\n  &:-webkit-autofill:hover,\n  &:-webkit-autofill:focus,\n  &:-webkit-autofill:active {\n    -webkit-box-shadow: 0 0 0 30px #ffffff inset !important;\n  }\n\n  &:focus {\n    outline-color: #c15ae0;\n  }\n\n  &:disabled {\n    border: 1px solid #e1e8e5;\n  }\n`;\n","import PropTypes from \"prop-types\";\nimport { StyledInput, StyledLabel } from \"./StyledFilterComponents\";\n\nconst Filter = ({ onFilterChange, filter, disabled }) => {\n  return (\n    <div>\n      <StyledLabel>\n        Search\n        <StyledInput\n          type=\"text\"\n          name=\"search\"\n          placeholder=\"Please, type search name\"\n          value={filter}\n          onChange={onFilterChange}\n          disabled={disabled}\n        />\n      </StyledLabel>\n    </div>\n  );\n};\n\nFilter.propTypes = {\n  onFilterChange: PropTypes.func,\n  filter: PropTypes.string,\n};\n\nexport default Filter;\n","import styled from \"styled-components\";\n\nexport const StyledLabel = styled.label`\n  text-transform: uppercase;\n  font-size: 1rem;\n  font-weight: 600;\n\n  color: #2db57f;\n\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n\n  margin-bottom: 1.5rem;\n`;\n\nexport const StyledCheckbox = styled.input`\n  margin-right: 0.5rem;\n  font-size: 1.5rem;\n`;\n","import PropTypes from 'prop-types';\nimport { StyledLabel, StyledCheckbox } from './StyledHardCodedCheckComponents';\n\nconst HardCodeContactsCheckbox = ({ onHardCodedCheckboxChange, isHardCodedContactsUsed }) => {\n  return (\n    <StyledLabel>\n      <StyledCheckbox\n        type=\"checkbox\"\n        name=\"useHardCoded\"\n        onChange={onHardCodedCheckboxChange}\n        checked={isHardCodedContactsUsed}\n        disabled={isHardCodedContactsUsed}\n      />\n      Use hard-coded contacts\n    </StyledLabel>\n  );\n};\n\nHardCodeContactsCheckbox.propTypes = {\n  onHardCodedCheckboxChange: PropTypes.func,\n};\n\nexport default HardCodeContactsCheckbox;\n","import styled from \"styled-components\";\n\nexport const StyledApp = styled.section`\n  background-color: #ffffff;\n  border: 1px solid #c15ae0;\n  border-radius: 1rem;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  padding: 1rem 1.5rem;\n\n  width: 100%;\n\n  box-shadow: 7px 7px 15px -8px rgba(0, 0, 0, 0.56);\n`;\n\nexport const StyledBanner = styled.p`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n  width: 100%;\n\n  padding: 1rem 1.5rem;\n  color: #fafafa;\n  text-transform: uppercase;\n  font-weight: 600;\n  font-size: 1.5rem;\n\n  background-color: #d6d6d6;\n`;\n","const hardCodedContacts = [\n  { id: \"id-1\", name: \"Rosie Simpson\", number: \"459-12-56\" },\n  { id: \"id-2\", name: \"Hermione Kline\", number: \"443-89-12\" },\n  { id: \"id-3\", name: \"Eden Clements\", number: \"645-17-79\" },\n  { id: \"id-4\", name: \"Annie Copeland\", number: \"227-91-26\" },\n  { id: \"id-5\", name: \"Bill Gates\", number: \"555-55-55\" },\n  { id: \"id-6\", name: \"Ryan Reinolds\", number: \"757-13-20\" },\n  { id: \"id-7\", name: \"Wes Borland\", number: \"111-22-33\" },\n];\n\nexport default hardCodedContacts;\n","import React from 'react';\nimport Form from './components/Form/Form';\nimport Contacts from './components/Contacts/Contacts';\nimport Filter from './components/Filter/Filter';\nimport HardCodeContactsCheckbox from './components/HardCodeCheckbox/HardCodeCheckbox';\nimport { ToastContainer, toast } from 'react-toastify';\nimport { v4 as uuidv4 } from 'uuid';\nimport { StyledApp, StyledBanner } from './components/AppComponents/AppComponents';\n\nimport hardCodedContacts from './data/hardCodedContacts';\n\nimport 'react-toastify/dist/ReactToastify.css';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      contacts: [],\n      filter: '',\n      isHardCodedContactsUsed: false,\n    };\n  }\n\n  //#region class methods\n\n  componentDidMount() {\n    const contactsFromLocalStorage = JSON.parse(localStorage.getItem('contacts'));\n\n    if (contactsFromLocalStorage) {\n      this.setState({\n        isHardCodedContactsUsed: contactsFromLocalStorage.some((contactEl) => !hardCodedContacts.includes(contactEl)),\n        contacts: contactsFromLocalStorage,\n      });\n    }\n  }\n\n  componentDidUpdate() {\n    localStorage.setItem('contacts', JSON.stringify(this.state.contacts));\n  }\n\n  isNameInContacts = (searchName) => {\n    return this.state.contacts.find(({ name }) => name === searchName);\n  };\n\n  isContactAdded = (bool) => bool;\n\n  addContact = (name, number) => {\n    if (this.isNameInContacts(name)) {\n      const existContactMessage = (name) => toast.warn(`There is an existing contact with name \"${name}\"!`);\n      existContactMessage(name);\n\n      return this.isContactAdded(false);\n    }\n\n    const id = uuidv4();\n\n    this.setState({\n      contacts: [...this.state.contacts, { id, name, number }],\n    });\n\n    const addedContactMessage = (name) => toast.success(`New contact \"${name}\" was added!`);\n    addedContactMessage(name);\n\n    return this.isContactAdded(true);\n  };\n\n  deleteContact = (event) => {\n    const id = event.target.value;\n\n    this.setState({\n      filter: '',\n      contacts: [\n        ...this.state.contacts.filter((contact) => {\n          return contact.id !== id;\n        }),\n      ],\n    });\n  };\n\n  deleteAll = () => {\n    this.setState({\n      contacts: [],\n      isHardCodedContactsUsed: !this.state.isHardCodedContactsUsed,\n    });\n  };\n\n  onFilterChange = (event) => {\n    this.setState({\n      filter: event.target.value,\n    });\n  };\n\n  getHardCodedContacts = () => {\n    this.state.isHardCodedContactsUsed\n      ? this.setState({\n          contacts: this.state.contacts.filter((contactEl) => !hardCodedContacts.includes(contactEl)),\n          isHardCodedContactsUsed: !this.state.isHardCodedContactsUsed,\n        })\n      : this.setState({\n          contacts: [...this.state.contacts, ...hardCodedContacts],\n          isHardCodedContactsUsed: !this.state.isHardCodedContactsUsed,\n        });\n  };\n\n  filterContacts = () => {\n    if (this.state.filter === '') {\n      return this.state.contacts;\n    }\n\n    const searchStr = this.state.filter.toLowerCase();\n\n    return this.state.contacts.filter((contact) => contact.name.toLowerCase().includes(searchStr));\n  };\n\n  //#endregion\n\n  render() {\n    const contacts = this.filterContacts();\n\n    return (\n      <StyledApp>\n        <Form onNewContactAdd={this.addContact}></Form>\n        <HardCodeContactsCheckbox\n          onHardCodedCheckboxChange={this.getHardCodedContacts}\n          isHardCodedContactsUsed={this.state.isHardCodedContactsUsed}\n        />\n        <Filter\n          onFilterChange={this.onFilterChange}\n          value={this.state.filter}\n          disabled={this.state.contacts.length ? false : true}\n        />\n        {contacts.length === 0 ? (\n          <StyledBanner>No contacts...</StyledBanner>\n        ) : (\n          <Contacts contacts={contacts} deleteContact={this.deleteContact} deleteAll={this.deleteAll} />\n        )}\n        <ToastContainer />\n      </StyledApp>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}